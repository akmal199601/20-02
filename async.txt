Асинхронность позволяет вынести отдельные задачи из основного потока в специальные асинхронные методы или блоки кода. 
Особенно это актуально в графических программах, где продолжительные задачи могу блокировать интерфейс пользователя. 
И чтобы этого не произошло, нужно задействовать асинхронность. Также асинхронность несет выгоды в веб-приложениях при 
обработке запросов от пользователей, при обращении к базам данных или сетевым ресурсам. При больших запросах к базе 
данных асинхронный метод просто уснет на время, пока не получит данные от БД, а основной поток сможет продолжить свою 
работу. В синхронном же приложении, если бы код получения данных находился в основном потоке, этот поток 
просто бы блокировался на время получения данных.
Ключевыми для работы с асинхронными вызовами в C# являются два ключевых слова: async и await, цель которых - упростить 
написание асинхронного кода. Они используются вместе для создания асинхронного метода.
Асинхонный метод обладает следующими признаками:
В заголовке используется модификатор async
Метод содержит одно или несколько выражений await
В качестве возвращаемого типа используется один из следующих:
void
Task
Task<T>
ValueTask<T>
Асинхронный метод, как и обычный, может использовать любое количество параметров или не использовать их вообще. 
Однако асинхронный метод не может определять параметры с модификаторами out и ref.
Также стоит отметить, что слово async, которое указывается в определении метода, 
не делает автоматически метод асинхронным. Оно лишь указывает, 
что данный метод может содержать одно или несколько выражений await.

Ссылка на источник https://metanit.com/sharp/tutorial/13.3.php